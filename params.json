{"name":"tcomb","tagline":"JavaScript types and combinators","body":"# Prerequisiti\r\n\r\n    array.forEach()\r\n    array.map()\r\n    array.some()\r\n    array.every()\r\n    Object.freeze()\r\n    Object.keys()\r\n\r\nSetup di riferimento\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <head>\r\n            <meta charset=\"utf-8\" />\r\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n            <title>gpr</title>\r\n            <!--[if lt IE 9]>\r\n            <script src=\"shims/json2.js\"></script>\r\n            <script src=\"shims/es5-shim.min.js\"></script>\r\n            <script src=\"shims/es5-sham.min.js\"></script>\r\n            <script src=\"shims/html5shiv.min.js\"></script>\r\n            <![endif]-->\r\n            <script type=\"text/javascript\" src=\"jquery.js\"></script>\r\n            <script type=\"text/javascript\" src=\"gpr.js\"></script>\r\n        </head>\r\n        <body>\r\n            <script type=\"text/javascript\">\r\n            </script>\r\n        </body>\r\n    </html>\r\n\r\n\r\n# Come sono fatti i tipi?\r\n\r\nUna funzione `T` è un tipo se\r\n\r\n1. ha firma `T(values, [mut])` ove `values` è l'insieme di valori che occorrono per avere un'istanza di `T` (dipende da `T`) e `mut` indica se l'istanza è mutabile (default `false`)\r\n2. è strutturalmente idempotente: `new T(new T(values)) equals new T(values)`\r\n3. possiede una funzione statica `T.is(x)` che restituisce `true` se `x` è un'istanza di `T`\r\n\r\nda 2. deriva che `T` può essere usato come deserializzatore JSON di default\r\n\r\n# primitive(name, is)\r\n\r\n- Nil\r\n- Str\r\n- Num\r\n- Bool\r\n- Arr\r\n- Obj\r\n- Func\r\n\r\n# struct(props, [name])\r\n\r\nL'opzione `name` è utile per facilitare il debug.\r\n\r\n    var Point = struct({\r\n        x: Num,\r\n        y: Num\r\n    });\r\n\r\n    // i metodi vengono definiti normalmente\r\n    Point.prototype.toString = function () {\r\n        return '(' + this.x + ', ' + this.y + ')';\r\n    };\r\n\r\nCome istanziare una struct\r\n\r\n    'use strict';\r\n\r\n    var p = new Point({x: 1, y: 2});\r\n    p.x = 2; // => TypeError, p è immutabile\r\n\r\n    p = new Point({x: 1, y: 2}, true);\r\n    p.x = 2; // ok, p ora è mutabile\r\n\r\nAlcune meta informazioni\r\n\r\n    Point.meta = {\r\n        kind: 'struct',\r\n        props: props,\r\n        name: name\r\n    };\r\n\r\n### is(x)\r\n\r\nRestituisce `true` se `x` è un'istanza della struct.\r\n\r\n    Point.is(p); // => true\r\n\r\n### update(instance, updates, [mut])\r\n\r\nRestituisce un'istanza con le nuove proprietà senza modificare l'istanza originale.\r\n\r\n    Point.update(p, {x: 3}); // => new Point({x: 3, y: 2})\r\n\r\n# union(types, [name])\r\n\r\nDefinisce un'unione di tipi.\r\n\r\n    var Circle = struct({\r\n        center: Point,\r\n        radius: Num\r\n    });\r\n\r\n    var Rectangle = struct({\r\n        a: Point,\r\n        b: Point\r\n    });\r\n\r\n    var Shape = union([\r\n        Circle, \r\n        Rectangle\r\n    ]);\r\n\r\n    // per poter usare Shape come costruttore occorre implementare dispatch()\r\n    Shape.dispatch = function (values) {\r\n        assert(Obj.is(values));\r\n        return values.hasOwnProperty('center') ?\r\n            Circle :\r\n            Rectangle;   \r\n    };\r\n\r\n    var shape = new Shape({center: {x: 1, y: 2}, radius: 10});\r\n\r\nAlcune meta informazioni\r\n\r\n    Shape.meta = {\r\n        kind: 'union',\r\n        types: types,\r\n        name: name\r\n    };\r\n\r\n### is(x)\r\n\r\nRestituisce `true` se `x` appartiene all'unione.\r\n\r\n    Shape.is(new Circle([p, 10])); // => true\r\n\r\n# maybe(type, [name])\r\n\r\nAnalogo ad una `union` con `Nil` e `type`.\r\n\r\n    var MaybeStr = maybe(Str);\r\n\r\n    MaybeStr.is('a');     // => true\r\n    MaybeStr.is(null);    // => true\r\n    MaybeStr.is(1);       // => false\r\n    \r\nAlcune meta informazioni\r\n\r\n    MaybeStr.meta = {\r\n        kind: 'maybe',\r\n        type: type,\r\n        name: name\r\n    };\r\n\r\n# enums(map, [name])\r\n\r\nDefinisce una enumerazione (di stringhe).\r\n\r\n    var Direction = enums({\r\n        North: 0, \r\n        East: 1,\r\n        South: 2, \r\n        West: 3\r\n    });\r\n\r\nAlcune meta informazioni\r\n\r\n    Direction.meta = {\r\n        kind: 'enums',\r\n        map: map,\r\n        name: name\r\n    };\r\n\r\n### is(x)\r\n\r\nRestituisce `true` se `x` appartiene dell'enum.\r\n\r\n    Direction.is('North'); // => true\r\n\r\n# tuple(types, [name])\r\n\r\nDefinisce un array di dimensione fissa le cui coordinate hanno i tipi specificati.\r\n\r\n    var Args = tuple([Num, Num]);\r\n\r\n    var a = new Args([1, 2]);\r\n\r\nAlcune meta informazioni\r\n\r\n    Args.meta = {\r\n        kind: 'tuple',\r\n        types: types,\r\n        name: name\r\n    };\r\n\r\n### is(x)\r\n\r\nRestituisce `true` se `x` è una tupla corretta.\r\n\r\n    Args.is([1, 2]);      // => true\r\n    Args.is([1, 'a']);    // => false, il secondo elemento non è un Num\r\n    Args.is([1, 2, 3]);   // => false, troppi elementi\r\n\r\n### update(instance, index, element, [mut])\r\n\r\nRestituisce un'istanza con le nuove proprietà senza modificare l'istanza originale.\r\n    \r\n    Args.update(a, 0, 2);    // => [2, 2]\r\n\r\n# subtype(type, predicate, [name])\r\n\r\nDefinisce un sottotipo di un tipo già definito.\r\n\r\n    var Int = subtype(Num, function (n) {\r\n        return n === parseInt(n, 10);\r\n    });\r\n\r\n    var Q1Point = subtype(Point, function (p) {\r\n        // punti nel primo quadrante\r\n        return p.x >= 0 && p.y >= 0;\r\n    });\r\n\r\n    // uso del costruttore\r\n    var p = new Q1Point({x: -1, y: -2}); // => fail!\r\n\r\nAlcune meta informazioni\r\n\r\n    Int.meta = {\r\n        kind: 'subtype',\r\n        type: type,\r\n        predicate: predicate,\r\n        name: name\r\n    };\r\n\r\n### is(x)\r\n\r\nRestituisce `true` se `x` è un'istanza corretta.\r\n\r\n    Int.is(2);      // => true\r\n    Int.is(1.1);    // => false\r\n\r\n# list(type, [name])\r\n\r\nDefinisce un array i cui elementi sono del tipo `type`.\r\n\r\n    var Path = list(Point);\r\n\r\n    // uso del costruttore\r\n    var path = new Path([\r\n        {x: 0, y: 0}, \r\n        {x: 1, y: 1}\r\n    ]);\r\n\r\nAlcune meta informazioni\r\n    \r\n    Path.meta = {\r\n        kind: 'list',\r\n        type: type,\r\n        name: name\r\n    };\r\n\r\n### Metodi utili\r\n\r\nRestituiscono un'istanza con le nuove proprietà senza modificare l'istanza originale.\r\n    \r\n    Path.append(path, element, [mut]);\r\n    Path.prepend(path, element, [mut]);\r\n    Path.update(path, index, element, [mut]);\r\n    Path.remove(path, index, [mut]);\r\n    Path.move(path, from, to, [mut]);\r\n\r\n# Utils\r\n\r\n    // fa partire il debugger prima di lanciare un errore\r\n    // il debugger parte una volta sola perchè tipicamente dopo un fallimento \r\n    // ce ne possono essere molti altri e diventerebbe una noia\r\n    fail(message)\r\n\r\n    // se l'assert fallisce chiama fail(message)\r\n    assert(guard, [message])\r\n\r\n    // rende immutabili le proprietà dirette di un oggetto o un array \r\n    // a meno che unless sia = true\r\n    freeze(obj_or_arr, [unless])\r\n\r\n    // copia i campi di y in x. Se overwrite è falsy non è possibile\r\n    // sovrascrivere dei campi già presenti in x in modo da evitare\r\n    // fastidiosi bug\r\n    mixin(x, y, [overwrite])\r\n\r\n    // manipolazione degli array\r\n    append(arr, element);\r\n    prepend(arr, element);\r\n    update(arr, index, element);\r\n    remove(arr, index);\r\n    move(arr, from, to);\r\n\r\n# Esempi d'uso\r\n\r\n### Come estendere una struct\r\n\r\n    var Point3D = struct(mixin(Point.meta.props, {\r\n        z: Num\r\n    }));\r\n\r\n    var p = new Point3D({x: 1, y: 2, z: 3});\r\n\r\n\r\n### Modifica in profondità di una struct\r\n\r\n    var c = new Circle({center: {x: 1, y: 2}, radius: 10});\r\n\r\n    // translate x by 1\r\n    var c2 = Circle.update(c, {\r\n        center: Point.update(c.center, {\r\n            x: c.center.x + 1\r\n        })\r\n    });\r\n\r\n### JSON Decoder\r\n\r\n    // (json, T, mut) -> instance of T\r\n    function decode(json, T, mut) {\r\n        if (T.fromJSON) {\r\n            return T.fromJSON(json, mut);\r\n        }\r\n        switch (T.meta.kind) {\r\n            case 'struct' :\r\n                var values = {};\r\n                var props = T.meta.props;\r\n                for (var prop in props) {\r\n                    if (props.hasOwnProperty(prop)) {\r\n                        values[prop] = decode(json[prop], props[prop], mut);    \r\n                    }\r\n                }\r\n                return new T(values, mut);\r\n            case 'union' :\r\n                assert(Func.is(T.dispatch));\r\n                return decode(json, T.dispatch(json), mut);\r\n            case 'maybe' :\r\n                return Nil.is(json) ? undefined : decode(json, T.meta.type, mut);\r\n            case 'tuple' :\r\n                return freeze(json.map(function (x, i) {\r\n                    return decode(x, T.meta.types[i], mut);\r\n                }, mut));\r\n            case 'subtype' :\r\n                var x = decode(json, T.meta.type, mut); \r\n                assert(T.meta.predicate(x));\r\n                return x;\r\n            case 'list' :\r\n                return freeze(json.map(function (x) {\r\n                    return decode(x, T.meta.type, mut);\r\n                }), mut);\r\n            default :\r\n                return json;\r\n        }\r\n    };\r\n\r\n# Copyright & License\r\n\r\nCopyright (C) 2014 Giulio Canti - Released under the MIT License.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}