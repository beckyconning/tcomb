{"name":"tcomb","tagline":"JavaScript types and combinators","body":"# tcomb\r\n\r\ntcomb is a library for Node.js and browser which allows you to **check the types** of JavaScript values at runtime with a **simple syntax**. It is great for checking external input, for testing and for adding safety to your internal code. Bonus points: \r\n\r\n- write complex domain models in a breeze and with small code footprint\r\n- easy debugging\r\n- **instances are immutables** by default\r\n- encode/decode of domain objects to/from JSON for free\r\n- gradually make your existing code safer\r\n\r\nThe library provides several type combinators and a built-in `assert` function. When an assertion fails the library **starts the debugger** so you can inspect the stack and quickly find out what's wrong.\r\n\r\nYou can check:\r\n\r\n- JavaScript native types\r\n    - Nil: `null` and  `undefined`\r\n    - Str: strings\r\n    - Num: numbers\r\n    - Bool: booleans\r\n    - Arr: arrays\r\n    - Obj: plain objects\r\n    - Func: functions\r\n    - Err: errors\r\n- structs (i.e. classes)\r\n- unions\r\n- maybe\r\n- enums\r\n- tuples\r\n- subtypes\r\n- lists\r\n- function types (experimental)\r\n\r\n## Quick examples\r\n\r\n### Let's build a new product model\r\n\r\n```javascript\r\n// a struct\r\nvar Product = struct({\r\n    name: Str,                  // required string\r\n    description: maybe(Str),    // optional string, can be null or undefined\r\n    homepage: Url,              // a subtype of a string\r\n    shippings: list(Str),       // a list of shipping methods\r\n    category: Category,         // an enumeration\r\n    price: union(Num, Price),   // a price expressed in dollars OR in another currency\r\n    dim: tuple([Num, Num])      // a tuple (width, height)\r\n});\r\n\r\nvar Url = subtype(Str, function (s) {\r\n    return s.indexOf('http://') === 0;\r\n});\r\n\r\nvar Category = enums({\r\n    audio: 0,\r\n    video: 1\r\n});\r\n\r\nvar Price = struct({\r\n    currency: Str,\r\n    amount: Num\r\n});\r\n\r\n// JSON of a product\r\nvar json = {\r\n    name: 'iPod',\r\n    description: 'Engineered for maximum funness.',\r\n    homepage: 'http://www.apple.com/ipod/',\r\n    shippings: ['Same Day', 'Next Businness Day'],\r\n    category: 'audio',\r\n    price: {currency: 'EUR', amount: 100},\r\n    dim: [2.4, 4.1]\r\n};\r\n\r\n// get an immutable instance\r\nvar ipod = new Product(json);\r\n```\r\n\r\n### You have existing code and you want to add safety\r\n\r\n```javascript\r\n// your code: plain old JavaScript class\r\nfunction Point (x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n}\r\n\r\nvar p = new Point(1, 'a'); // silent error\r\n```\r\n\r\nin order to \"tcombify\" your code you can simply add some assertions\r\n\r\n```javascript\r\nfunction Point (x, y) {\r\n    assert(Num.is(x));\r\n    assert(Num.is(y));\r\n    this.x = x;\r\n    this.y = y;\r\n}\r\n\r\nvar p = new Point(1, 'a'); // => fail! debugger kicks in\r\n```\r\n\r\n## Setup\r\n\r\nNode\r\n\r\n    npm install tcomb\r\n\r\n    var t = require('tcomb');\r\n\r\nBrowser\r\n\r\nThis library uses a few ES5 methods\r\n\r\n- `Array#forEach()`\r\n- `Array#map()`\r\n- `Array#some()`\r\n- `Array#every()`\r\n- `Object#keys()`\r\n- `JSON.stringify()`\r\n\r\nyou can use `es5-shim` and `json2` to support old browsers\r\n\r\n```html\r\n<!--[if lt IE 9]>\r\n<script src=\"json2.js\"></script>\r\n<script src=\"es5-shim.min.js\"></script>\r\n<![endif]-->\r\n<script type=\"text/javascript\" src=\"tcomb.js\"></script>\r\n<script type=\"text/javascript\">\r\n    console.log(t);\r\n</script>\r\n```\r\n\r\n## Tests\r\n\r\nRun `mocha` in the project root.\r\n\r\n## What's a type?\r\n\r\nIn tcomb a `type` is a function `T` such that\r\n\r\n1. `T` has signature `T(values, [mut])` where `values` depends on the nature of `T` and the optional boolean `mut` makes the instance mutable (default `false`)\r\n2. `T` is idempotent: `new T(new T(values)) \"equals\" new T(values)`\r\n3. `T` owns a static function `T.is(x)` returning `true` if `x` is a instance of `T`\r\n\r\n**Note**: 2. implies that `T` can be used as a default JSON decoder\r\n\r\n## Api\r\n\r\n### assert(guard, [message], [values...]);\r\n\r\nIf `guard !== true` the debugger kicks in.\r\n\r\n- `guard` boolean condition\r\n- `message` optional string useful for debugging\r\n- `values...` optional values formatted by `message` ([visionmedia/debug](https://github.com/visionmedia/debug) style)\r\n\r\nExample\r\n\r\n```javascript\r\nassert(1 === 2); // => 'assert(): failed'\r\nassert(1 === 2, 'error!'); // => 'error!'\r\nassert(1 === 2, 'error: %s !== %s', 1, 2); // => 'error: 1 !== 2'\r\n```\r\n\r\n**Customize failure behaviour**\r\n\r\nIn production envs you don't want to leak failures to the user\r\n\r\n```javascript\r\n// override onfail hook\r\nassert.onfail = function (message) {\r\n    try {\r\n        // capture stack trace\r\n        throw new Error(message);\r\n    } catch (e) {\r\n        // use you favourite JavaScript error logging service\r\n        console.log(e.stack);\r\n    }\r\n};\r\n```\r\n\r\n### struct(props, [name])\r\n\r\nDefines a struct like type.\r\n\r\n- `props` hash name -> type\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\n\"use strict\";\r\n\r\n// defines a struct with two numerical props\r\nvar Point = struct({\r\n    x: Num,\r\n    y: Num\r\n});\r\n\r\n// methods are defined as usual\r\nPoint.prototype.toString = function () {\r\n    return '(' + this.x + ', ' + this.y + ')';\r\n};\r\n\r\n// costructor usage, p is immutable\r\nvar p = new Point({x: 1, y: 2});\r\n\r\np.x = 2; // => TypeError\r\n\r\np = new Point({x: 1, y: 2}, true); // now p is mutable\r\n\r\np.x = 2; // ok\r\n```\r\n\r\n#### is(x)\r\n\r\nReturns `true` if `x` is an instance of the struct.\r\n\r\n```javascript\r\nPoint.is(p); // => true\r\n```\r\n\r\n#### update(instance, updates, [mut])\r\n\r\nReturns an instance with updated props, without modifying the original.\r\n\r\n```javascript\r\nPoint.update(p, {x: 3}); // => new Point({x: 3, y: 2})\r\n```\r\n\r\n### union(types, [name])\r\n\r\nDefines a union of types.\r\n\r\n- `types` array of types\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\nvar Circle = struct({\r\n    center: Point,\r\n    radius: Num\r\n});\r\n\r\nvar Rectangle = struct({\r\n    bl: Point, // bottom left vertex\r\n    tr: Point  // top right vertex\r\n});\r\n\r\nvar Shape = union([\r\n    Circle, \r\n    Rectangle\r\n]);\r\n```\r\n\r\n#### is(x)\r\n\r\nReturns `true` if `x` belongs to the union.\r\n\r\n```javascript\r\nShape.is(new Circle({center: p, radius: 10})); // => true\r\n```\r\n\r\n### maybe(type, [name])\r\n\r\nSame as `union([Nil, type])`.\r\n\r\n```javascript\r\n// the value of a radio input where null = no selection\r\nvar Radio = maybe(Str);\r\n\r\nRadio.is('a');     // => true\r\nRadio.is(null);    // => true\r\nRadio.is(1);       // => false\r\n```    \r\n\r\n### enums(map, [name])\r\n\r\nDefines an enum of strings.\r\n\r\n- `map` hash enum -> value\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\nvar Direction = enums({\r\n    North: 0, \r\n    East: 1,\r\n    South: 2, \r\n    West: 3\r\n});\r\n```\r\n\r\n#### is(x)\r\n\r\nReturns `true` if `x` belongs to the enum.\r\n\r\n```javascript\r\nDirection.is('North'); // => true\r\n```\r\n\r\n### tuple(types, [name])\r\n\r\nDefines a tuple whose coordinates have the specified types.\r\n\r\n- `types` array of coordinates types\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\nvar Area = tuple([Num, Num]);\r\n\r\n// constructor usage, area is immutable\r\nvar area = new Area([1, 2]);\r\n```\r\n\r\n#### is(x)\r\n\r\nReturns `true` if `x` belongs to the tuple.\r\n\r\n```javascript\r\nArea.is([1, 2]);      // => true\r\nArea.is([1, 'a']);    // => false, second element is not a Num\r\nArea.is([1, 2, 3]);   // => false, too many elements\r\n```\r\n\r\n#### update(instance, index, element, [mut])\r\n\r\nReturns an instance without modifying the original.\r\n    \r\n```javascript\r\nArea.update(area, 0, 2);    // => [2, 2]\r\n```\r\n\r\n### subtype(type, predicate, [name])\r\n\r\nDefines a subtype of an existing type.\r\n\r\n- `type` the supertype\r\n- `predicate` a function with signature `(x) -> boolean`\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\n// points of the first quadrant\r\nvar Q1Point = subtype(Point, function (p) {\r\n    return p.x >= 0 && p.y >= 0;\r\n});\r\n\r\n// costructor usage, p is immutable\r\nvar p = new Q1Point({x: 1, y: 2});\r\n\r\np = new Q1Point({x: -1, y: -2}); // => fail!\r\n```\r\n\r\n#### is(x)\r\n\r\nReturns `true` if `x` belongs to the subtype.\r\n\r\n```javascript\r\nvar Int = subtype(Num, function (n) {\r\n    return n === parseInt(n, 10);\r\n});\r\n\r\nInt.is(2);      // => true\r\nInt.is(1.1);    // => false\r\n```\r\n\r\n### list(type, [name])\r\n\r\nDefines an array where all the elements are of type `type`.\r\n\r\n- `type` type of all the elements\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\nvar Path = list(Point);\r\n\r\n// costructor usage, path is immutable\r\nvar path = new Path([\r\n    {x: 0, y: 0}, \r\n    {x: 1, y: 1}\r\n]);\r\n```\r\n\r\n#### is(x)\r\n\r\nReturns `true` if `x` belongs to the list.\r\n\r\n```javascript\r\nvar p1 = new Point({x: 0, y: 0});\r\nvar p2 = new Point({x: 1, y: 2});\r\nPath.is([p1, p2]); // => true\r\n```\r\n\r\n#### Useful methods\r\n\r\nAll of these methods return an instance without modifying the original.\r\n\r\n```javascript\r\nPath.append(path, element, [mut]);\r\nPath.prepend(path, element, [mut]);\r\nPath.update(path, index, element, [mut]);\r\nPath.remove(path, index, [mut]);\r\nPath.move(path, from, to, [mut]);\r\n```\r\n\r\n### func(Arguments, f, [Return], [name])\r\n\r\n**Experimental**. Defines a function where the `arguments` and the return value are checked.\r\n\r\n- `Arguments` the type of `arguments`\r\n- `f` the function to execute\r\n- `Return` optional, check the type of the return value\r\n- `name` optional string useful for debugging\r\n\r\nExample\r\n\r\n```javascript\r\nvar sum = func(tuple([Num, Num]), function (a, b) {\r\n    return a + b;\r\n}, Num);\r\n\r\nsum(1, 2); // => 3\r\nsum(1, 'a'); // => fail!\r\n```\r\n\r\n## TODO\r\n\r\n- more tests\r\n- jsDoc comments\r\n- Your ideas?\r\n\r\n## Contribution\r\n\r\nIf you do have a contribution for the package feel free to put up a Pull Request or open Issue.\r\n\r\n## Copyright & License\r\n\r\nCopyright (C) 2014 Giulio Canti - Released under the MIT License.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}